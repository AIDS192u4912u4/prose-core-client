# git-cliff ~ configuration file
# https://git-cliff.org/docs/configuration

[remote.github]
owner = "prose-im"
repo = "prose-core-client"
token = ""

[changelog]
# template for the release notes
# https://keats.github.io/tera/docs/#introduction
body = """
{% for commit in commits %}
  {% if commit.github.pr_title -%}
    {%- set commit_message = commit.github.pr_title -%}
  {%- else -%}
    {%- set commit_message = commit.message -%}
  {%- endif -%}
  * {{ commit_message | split(pat="\n") | first | trim }}\
    {% if commit.github.username %} by @{{ commit.github.username }}{%- endif -%}
    {% if commit.github.pr_number %} in \
      [#{{ commit.github.pr_number }}]({{ self::remote_url() }}/pull/{{ commit.github.pr_number }}) \
    {%- endif %}
{%- endfor -%}
{%- macro remote_url() -%}
  https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}
{%- endmacro -%}
"""
# remove the leading and trailing whitespace from the template
trim = true
# changelog footer
footer = ""
# postprocessors
postprocessors = [
    { pattern = '<REPO>', replace = "https://github.com/prose-im/prose-core-client" }, # replace repository URL
    { pattern = '<WEB-REPO>', replace = "https://github.com/prose-im/prose-app-web" }, # replace repository URL
]

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = true
# process each line of a commit as an individual commit
split_commits = false
# regex for preprocessing the commit messages
commit_preprocessors = [
    # Replace issue numbers
    { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](<REPO>/issues/${2}))" },
    { pattern = '\((\w+\s)?prose-im\/prose-app-web(\/)?#([0-9]+)\)', replace = "([prose-app-web#${3}](<WEB-REPO>/issues/${3}))" },
]
commit_parsers = [
    { message = "^style", skip = true },
    { message = "^test", skip = true },
    { message = "^chore: release", skip = true },
    { message = "^chore|^ci", skip = true },
]
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false
# filter out the commits that are not matched by commit parsers
filter_commits = false
# regex for matching git tags
# tag_pattern = "v[0-9].*"
# regex for skipping tags
skip_tags = "beta|alpha"
# regex for ignoring tags
ignore_tags = "rc"
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "newest"