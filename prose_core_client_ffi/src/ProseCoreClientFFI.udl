namespace ProseCoreClientFFI {
  void enableLogging();
};

interface Client {
  constructor();
  
  [Throws=LoginError]
  BareJid connect([ByRef] string jid, [ByRef] string password, AccountObserver observer);

  void sendMessage([ByRef] string account_jid, [ByRef] string receiver_jid, [ByRef] string body);
  void loadRoster([ByRef] string account_jid);
  void sendXMLPayload([ByRef] string account_jid, [ByRef] string xml_string);
};

callback interface AccountObserver {
  void didConnect();
  void didDisconnect();
  
  void didReceiveMessage(Message message);
  void didReceiveRoster(Roster roster);
};

enum MessageKind {
  "Chat", 
  "Error", 
  "Groupchat", 
  "Headline", 
  "Normal",
};

enum ChatState {
  "Active", 
  "Composing", 
  "Gone", 
  "Inactive", 
  "Paused",
};

dictionary Message {
  BareJid from;
  BareJid? to;
  string? id;
  MessageKind? kind;
  string? body;
  ChatState? chat_state;
  string? error;
};

[Error]
enum LoginError {
  "InvalidJID"
};

dictionary BareJid {
  string? node;
  string domain;
};

dictionary Roster {
  sequence<RosterGroup> groups;
};

dictionary RosterGroup {
  string name;
  sequence<RosterItem> items;
};

enum RosterItemSubscription {
  "None",
  "To",
  "From",
  "Both",
};

dictionary RosterItem {
  BareJid jid;
  RosterItemSubscription subscription;
};

enum PresenceKind {
  "Unavailable", 
  "Subscribe", 
  "Subscribed", 
  "Unsubscribe", 
  "Unsubscribed", 
  "Probe", 
  "Error",
};

enum ShowKind {
  "Away",
  "Chat", 
  "DND",
  "XA",
};

dictionary Presence {
  PresenceKind? kind;
  BareJid? from;
  BareJid? to;
  ShowKind? show;
  string? status;
};