namespace prose_core_ffi {
    void set_logger(Logger logger, LogLevel max_level);
};

[Custom]
typedef string PathBuf;
[Custom]
typedef string Url;
[Custom]
typedef string MessageId;
[Custom]
typedef string StanzaId;
[Custom]
typedef string Emoji;
[Custom]
typedef i64 DateTime;

interface Client {
    [Throws=ClientError]
    constructor(FullJid jid, string cache_dir, ClientDelegate? delegate);
};

callback interface ClientDelegate {
    void handle_event(ClientEvent event);
};

interface AccountBookmarksClient {
    constructor(PathBuf bookmarks_path);

    [Throws=ClientError]
    sequence<AccountBookmark> load_bookmarks();
    [Throws=ClientError]
    void add_bookmark([ByRef] BareJid jid, boolean select_bookmark);
    [Throws=ClientError]
    void remove_bookmark([ByRef] BareJid jid);
    [Throws=ClientError]
    void select_bookmark([ByRef] BareJid jid);
};

enum LogLevel {
    "Trace",
    "Debug",
    "Info",
    "Warn",
    "Error"
};

callback interface Logger {
    void log(LogLevel level, string message);
};

enum CachePolicy {
    "ReturnCacheDataElseLoad",
    "ReturnCacheDataDontLoad",
    "ReloadIgnoringCacheData"
};

[Enum]
interface ClientEvent {
    ComposingUsersChanged(BareJid conversation);
    ConnectionStatusChanged(ConnectionEvent event);
    ContactChanged(BareJid jid);
    AvatarChanged(BareJid jid);
    MessagesAppended(BareJid conversation, sequence<MessageId> message_ids);
    MessagesUpdated(BareJid conversation, sequence<MessageId> message_ids);
    MessagesDeleted(BareJid conversation, sequence<MessageId> message_ids);
};

[Enum]
interface ConnectionEvent {
    Connect();
    Disconnect(ConnectionError? error);
};

[Error]
interface ConnectionError {
  TimedOut();
  InvalidCredentials();
  Generic(string msg);
};

dictionary FullJid {
  string? node;
  string domain;
  string resource;
};

dictionary BareJid {
  string? node;
  string domain;
};

[Error]
interface ClientError {
    Generic(string msg);
};

[Error]
enum JidParseError {
  "NoDomain",
  "NoResource",
  "EmptyNode",
  "EmptyResource",
};

enum Availability {
    "Available",
    "Unavailable",
    "DoNotDisturb",
    "Away",
};

dictionary UserActivity {
    string emoji;
    string? status;
};

dictionary Contact {
    BareJid jid;
    string name;
    Availability availability;
    UserActivity? activity;
    sequence<string> groups;
};

dictionary Address {
    string? locality;
    string? country;
};

dictionary UserProfile {
    string? first_name;
    string? last_name;
    string? nickname;
    string? org;
    string? role;
    string? title;
    string? email;
    string? tel;
    Url? url;
    Address? address;
};

dictionary Reaction {
    Emoji emoji;
    sequence<BareJid> from;
};

dictionary Message {
    MessageId id;
    StanzaId? stanza_id;
    BareJid from;
    string body;
    DateTime timestamp;
    boolean is_read;
    boolean is_edited;
    boolean is_delivered;
    sequence<Reaction> reactions;
};

dictionary AccountBookmark {
    BareJid jid;
    boolean is_selected;
};

dictionary AccountSettings {
    Availability availability;
};